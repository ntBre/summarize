use std::fs::read_to_string;

use crate::coriolis::Coriol;
use crate::curvil::Curvil::*;

use super::*;

use symm::Irrep::*;

/// load a "matrix" (Vec<Vec<f64>>) from `filename`
fn load_mat(filename: &str) -> Vec<Vec<f64>> {
    let data = read_to_string(filename).unwrap();
    let mut ret = Vec::new();
    for line in data.lines() {
        let v: Vec<_> = line
            .split_ascii_whitespace()
            .map(|s| s.parse::<f64>().unwrap())
            .collect();
        if !v.is_empty() {
            ret.push(v);
        }
    }
    ret
}

macro_rules! check {
    ($got:expr, $want:expr) => {
        assert_eq!($got.harm.len(), $want.harm.len());
        assert_eq!($got.fund.len(), $want.fund.len());
        assert_eq!($got.corr.len(), $want.corr.len());
        assert_eq!($got.lxm.len(), $want.lxm.len());
        assert_eq!($got.irreps, $want.irreps);
        assert_eq!($got.rots.len(), $want.rots.len());
        assert_eq!($got.rots, $want.rots);
        assert_eq!($got.rot_equil, $want.rot_equil);
        assert_eq!($got.deltas, $want.deltas);
        assert_eq!($got.phis, $want.phis);
        assert_eq!($got.fermi, $want.fermi,);
        assert_eq!($got.coriolis, $want.coriolis);
        assert_eq!($got.curvils, $want.curvils);
        assert_eq!($got.ralpha, $want.ralpha);
        assert_eq!($got.requil, $want.requil);
        assert_eq!($got, $want);
    };
}

#[test]
fn c3h2() {
    let got = Summary::new("testfiles/spectro.out");
    let want = Summary {
        harm: vec![
            3281.362, 3247.646, 1623.590, 1307.445, 1090.564, 992.798, 908.650,
            901.695, 785.141,
        ],
        fund: vec![
            3152.935, 3108.684, 1593.567, 1275.793, 1056.887, 1007.899,
            876.800, 876.478, 772.658,
        ],
        corr: vec![
            3139.8162, 3108.6836, 1595.1229, 1275.7931, 1056.8867, 1007.8986,
            876.8004, 876.4785, 772.6584,
        ],
        zpt: 6993.7720,
        irreps: vec![A1, B2, A1, A1, B2, A2, B2, A1, B1],
        geom: Molecule::from_str(
            "
C                  0.0000000     -0.8888444      0.0000000
C                 -0.6626966      0.3682537      0.0000000
C                  0.6626966      0.3682537      0.0000000
H                 -1.5951933      0.9069249      0.0000000
H                  1.5951933      0.9069249      0.0000000
",
        )
        .unwrap(),
        lxm: load_mat("testfiles/c3h2.lxm"),
        rots: vec![
            vec![34894.01637513078, 32077.74204128214, 16662.81557281586],
            vec![34836.10546601892, 31945.734428251002, 16613.8384789524],
            vec![34836.818972068955, 31954.245536133618, 16617.100220895438],
            vec![34902.17372791296, 31893.02192036086, 16619.66344641134],
            vec![34800.58605559508, 32088.603522035482, 16673.65007224798],
            vec![34760.677683586124, 32115.599832878383, 16527.6181680316],
            vec![34917.103392321354, 31965.84450633364, 16678.15595289172],
            vec![34844.64955107192, 32166.1118641268, 16604.589881623102],
            vec![34949.073260042474, 32149.5483308223, 16647.67605368686],
            vec![34761.879851342695, 32069.911462279182, 16686.48418737496],
        ],
        rot_equil: vec![35112.592058334, 32253.171593930, 16811.161874808],
        deltas: Delta {
            big_delta_j: Some(0.0404924519),
            big_delta_k: Some(0.0586995053),
            big_delta_jk: Some(0.0444781706),
            delta_j: Some(0.0158360300),
            delta_k: Some(0.0564071516),
            d_j: Some(0.0199109962),
            d_jk: Some(0.1679669046),
            d_k: Some(-0.0442077731),
            d1: Some(-0.0158360300),
            d2: Some(-0.0102907278),
            de: None,
        },
        phis: Phi {
            big_phi_j: Some(1.189560512e-7),
            big_phi_k: Some(6.916327965e-6),
            big_phi_jk: Some(1.8509200050000002e-6),
            big_phi_kj: Some(-7.93368659e-6),
            phi_j: Some(5.930919029e-8),
            phi_jk: Some(1.038974643e-6),
            phi_k: Some(-3.24137832e-7),
            h_j: Some(-1.130353332e-7),
            h_jk: Some(3.151920359e-6),
            h_kj: Some(-8.790483671e-6),
            h_k: Some(6.7041160770000005e-6),
            h1: Some(5.516109046e-8),
            h2: Some(1.159956922e-7),
            h3: Some(4.148099836e-9),
            he: None,
        },
        fermi: HashMap::from([
            (3, vec![(7, 7), (8, 8), (9, 9)]),
            (1, vec![(3, 3)]),
        ]),
        coriolis: Coriol {
            data: HashMap::from([
                ((6, 5), vec![1]),
                ((7, 6), vec![1]),
                ((8, 6), vec![2]),
                ((8, 7), vec![3]),
                ((9, 7), vec![2]),
                ((9, 8), vec![1]),
                ((8, 5), vec![3]),
            ]),
        },
        curvils: vec![
            Bond(2, 3),
            Bond(1, 2),
            Bond(1, 3),
            Bond(2, 4),
            Bond(3, 5),
            Angle(2, 4, 1),
            Angle(3, 5, 1),
            Torsion(4, 2, 1, 3),
            Torsion(5, 3, 1, 2),
        ],
        ralpha: vec![
            1.3318793, 1.4286195, 1.4286195, 1.0788239, 1.0788239, 147.833696,
            147.833696,
        ],
        requil: vec![
            1.3253932, 1.421078, 1.421078, 1.0769014, 1.0769014, 147.810114,
            147.810114,
        ],
    };
    check!(got, want);
}

#[test]
fn c2h4() {
    let got = Summary::new("testfiles/c2h4.out");
    let want = Summary {
        harm: vec![
            3247.609, 3221.841, 3154.890, 3140.072, 1670.825, 1477.408,
            1368.483, 1248.308, 1050.245, 963.438, 949.377, 825.523,
        ],
        fund: vec![
            3100.190, 3077.237, 3018.494, 3000.770, 1628.282, 1439.513,
            1341.751, 1226.454, 1024.367, 948.677, 939.365, 823.880,
        ],
        corr: vec![
            3100.1904, 3077.2369, 3015.7671, 2978.2409, 1623.0185, 1439.5135,
            1341.7506, 1226.4540, 1024.3674, 948.6771, 939.3649, 823.8796,
        ],
        zpt: 11022.5891,
        irreps: vec![B2u, B3g, Ag, B1u, Ag, B1u, Ag, B3g, Au, B3u, B2g, B2u],
        geom: Molecule::from_str(
            "
    C              0.6667933      0.0000000      0.0000000
    H              1.2309854     -0.9236110      0.0000000
    H              1.2309854      0.9236110      0.0000000
    C             -0.6667933      0.0000000      0.0000000
    H             -1.2309854     -0.9236110      0.0000000
    H             -1.2309854      0.9236110      0.0000000
",
        )
        .unwrap(),
        lxm: load_mat("testfiles/c2h4.lxm"),
        rots: vec![
            vec![145391.92526458908, 29890.62115356604, 24727.45453943478],
            vec![144638.1241102693, 29822.48132578722, 24668.07164935414],
            vec![144600.68303018968, 29827.367942852623, 24678.081719526763],
            vec![144134.19996969253, 29846.35979506692, 24661.808984906518],
            vec![144345.39176465519, 29854.592095963602, 24668.62326747686],
            vec![145793.54522887335, 29805.95976342684, 24583.38927374288],
            vec![147321.66533333846, 30081.552974217084, 24680.249218998102],
            vec![145738.42238962092, 29915.8846640017, 24664.974793263],
            vec![149491.0564950884, 29936.732231531023, 24663.6856856936],
            vec![142701.61172989372, 30247.131346695063, 24727.6913754766],
            vec![144343.05638140737, 29724.68003221388, 24767.8935440944],
            vec![141578.44528184587, 29724.158393336962, 24748.0772626206],
            vec![146884.3520790047, 29443.48370038362, 24680.2342293752],
        ],
        rot_equil: vec![146958.2629116, 30118.949085428005, 24996.095563124],
        deltas: Delta {
            big_delta_j: Some(0.043357464),
            big_delta_k: Some(2.4647551858),
            big_delta_jk: Some(0.3039581698),
            delta_j: Some(0.0081815174),
            delta_k: Some(0.2862930766),
            d_j: Some(0.0402866016),
            d_jk: Some(0.3223833443),
            d_k: Some(2.4494008737),
            d1: Some(-0.0081815174),
            d2: Some(-0.0015354312),
            de: None,
        },
        phis: Phi {
            big_phi_j: Some(6.866115216e-8),
            big_phi_k: Some(0.0001694225027),
            big_phi_jk: Some(5.246436948e-6),
            big_phi_kj: Some(-1.202918625e-5),
            phi_j: Some(3.232823998e-8),
            phi_jk: Some(3.046013019e-6),
            phi_k: Some(9.834097436999999e-5),
            h_j: Some(2.395642285e-8),
            h_jk: Some(1.7008802329999999e-6),
            h_kj: Some(4.5990707079999997e-7),
            h_k: Some(0.0001605236708),
            h1: Some(2.7214769569999997e-8),
            h2: Some(2.2352364650000002e-8),
            h3: Some(5.1134704169999995e-9),
            he: None,
        },
        fermi: HashMap::from([
            (3, vec![(5, 5), (5, 5), (7, 5)]),
            (5, vec![(12, 12), (12, 12)]),
            (4, vec![(6, 5)]),
        ]),
        coriolis: Coriol {
            data: HashMap::from([((8, 7), vec![3]), ((12, 10), vec![1])]),
        },
        curvils: vec![
            Bond(1, 3),
            Bond(1, 4),
            Bond(2, 5),
            Bond(2, 6),
            Bond(1, 2),
            Angle(1, 2, 5),
            Angle(1, 2, 6),
            Angle(2, 1, 3),
            Angle(2, 1, 4),
            Torsion(3, 1, 2, 5),
            Torsion(4, 1, 2, 6),
            Torsion(4, 1, 2, 5),
            Torsion(3, 1, 2, 6),
        ],
        ralpha: vec![
            1.0898405,
            1.3405645,
            2.4761771,
            3.0972314,
            1.0898405,
            95.4119125,
            147.3864503,
            31.3991814,
            32.6135516,
        ],
        requil: vec![
            1.0822985,
            1.3335866,
            2.4619708,
            3.07791,
            1.0822985,
            95.4676032,
            147.3701286,
            31.4188659,
            32.6298714,
        ],
    };
    check!(got, want);
}

#[test]
fn degmode() {
    let got = Summary::new("testfiles/degmode.out");
    let want = Summary {
        harm: vec![2929.500, 2834.256, 2236.673, 939.167, 791.065],
        fund: vec![2886.379, 2799.917, 2221.068, 936.105, 797.174],
        corr: vec![2886.3792, 2799.9172, 2221.0683, 936.1049, 797.1743],
        zpt: 5707.3228,
        irreps: vec![Ag, B1u, Ag, B2u, B3u, B3g, B2g],
        geom: Molecule::from_str(
            "
                 H   0.0000000      0.0000000      1.6353253
                 C   0.0000000      0.0000000     -0.6014244
                 C   0.0000000      0.0000000      0.6014244
                 H   0.0000000      0.0000000     -1.6353253
",
        )
        .unwrap(),
        lxm: load_mat("testfiles/degmode.lxm"),
        rots: vec![
            vec![35902.40128478416],
            vec![35846.80177552348],
            vec![35893.04476216998],
            vec![35785.20042125364],
            vec![35928.61513731168],
            vec![35954.52320153204],
        ],
        rot_equil: vec![35915.1364684],
        deltas: Delta {
            big_delta_j: None,
            big_delta_k: None,
            big_delta_jk: None,
            delta_j: None,
            delta_k: None,
            d_j: None,
            d_jk: None,
            d_k: None,
            d1: None,
            d2: None,
            de: Some(0.0410990452),
        },
        phis: Phi {
            big_phi_j: None,
            big_phi_k: None,
            big_phi_jk: None,
            big_phi_kj: None,
            phi_j: None,
            phi_jk: None,
            phi_k: None,
            h_j: None,
            h_jk: None,
            h_kj: None,
            h_k: None,
            h1: None,
            h2: None,
            h3: None,
            he: Some(0.0493895173 / 1e6),
        },
        fermi: HashMap::new(),
        coriolis: Coriol::default(),
        curvils: vec![
            Bond(1, 2),
            Bond(2, 3),
            Bond(3, 4),
            Linear(2, 1, 3),
            Linear(2, 1, 3),
            Linear(3, 2, 4),
            Linear(3, 2, 4),
        ],
        ralpha: vec![2.232577, 1.2064508, 2.232577, 0.0264087, 0.0264087],
        requil: vec![2.2367497, 1.2028487, 2.2367497, 0.0, 0.0],
    };
    check!(got, want);
}

#[test]
fn allyl() {
    let got = Summary::new("testfiles/allyl.out");
    let want = Summary {
        harm: vec![
            3253.47, 3250.966, 3214.569, 3141.939, 3139.941, 1625.315, 1556.29,
            1451.065, 1320.264, 1296.008, 1153.123, 1145.001, 1056.978,
            1041.647, 953.372, 641.32, 443.764, 290.685,
        ],
        fund: vec![
            3109.857, 3105.617, 3072.258, 3007.378, 3003.555, 1587.556,
            1517.298, 1413.193, 1292.210, 1271.072, 1128.549, 1119.805,
            1035.561, 1008.711, 940.006, 622.837, 432.824, 188.325,
        ],
        corr: vec![
            3109.8572, 3105.6171, 3072.2577, 3011.8158, 2991.8791, 1585.8923,
            1518.4918, 1413.1933, 1292.4703, 1269.5049, 1136.4317, 1119.8048,
            1035.8188, 1008.7108, 940.0058, 622.8365, 439.1814, 188.3254,
        ],
        geom: Molecule::from_str(
            "
H    0.0000000     -1.5747877      0.0000000
C    0.0000000     -0.4928627      0.0000000
C   -1.1790111      0.2248631      0.0000000
C    1.1790111      0.2248631      0.0000000
H   -1.1614419      1.3102804      0.0000000
H   -2.1461889     -0.2660770      0.0000000
H    1.1614419      1.3102804      0.0000000
H    2.1461889     -0.2660770      0.0000000

",
        )
        .unwrap(),
        irreps: vec![
            A1, B2, A1, B2, A1, B2, A1, B2, A1, B2, A2, B1, A1, B1, B2, A2, A1,
            B1,
        ],
        lxm: load_mat("testfiles/allyl.lxm"),
        rots: vec![
            vec![48970.66631316048, 11059.5686199635, 9016.39008303152],
            vec![48876.21669926758, 11045.96403821946, 9005.447658314519],
            vec![48870.83242672191, 11047.81075976074, 9006.96760607658],
            vec![48823.56714779362, 11042.53441249994, 9001.040709181922],
            vec![48845.29310722488, 11049.3456971457, 9005.24379944308],
            vec![48855.7228868387, 11048.15252316286, 9004.566268488],
            vec![48755.439311713126, 11052.136764929679, 8994.163470195399],
            vec![49275.00962067292, 11055.03575799854, 8994.32535812272],
            vec![49214.24768528548, 11079.06412350724, 9004.7761232086],
            vec![49203.02045773338, 11030.006085680121, 8983.43989397274],
            vec![48769.394650633025, 11100.511275952562, 9017.63122380764],
            vec![48609.371432401786, 11034.125234053041, 9017.715165695881],
            vec![48704.72042366868, 11029.48744472778, 9016.74084020738],
            vec![49266.795307323715, 11045.52933915536, 8999.47579255116],
            vec![48573.05457403966, 11034.931675765061, 9022.0291791665],
            vec![49224.41064961168, 11055.17965837838, 9001.460418623119],
            vec![49057.123460123104, 10981.811450132042, 8996.525834764441],
            vec![49526.72136425888, 11028.29427074494, 8988.4374342476],
            vec![48169.57889444036, 11150.71152304466, 9087.52183954118],
        ],
        zpt: 14773.0842,
        rot_equil: vec![49396.503512202005, 11140.28773928, 9090.306911476],
        deltas: Delta {
            big_delta_j: Some(0.0092136543),
            big_delta_k: Some(0.5758169627),
            big_delta_jk: Some(-0.0681457487),
            delta_j: Some(0.0024231046),
            delta_k: Some(0.0248971679),
            d_j: Some(0.0088888063),
            d_jk: Some(-0.0661966605),
            d_k: Some(0.5741927225),
            d1: Some(-0.0024231046),
            d2: Some(-0.000162424),
            de: None,
        },
        phis: Phi {
            big_phi_j: Some(1.1901194190000001e-8),
            big_phi_k: Some(2.5356188719999998e-5),
            big_phi_jk: Some(1.598064793e-7),
            big_phi_kj: Some(-4.697500023e-6),
            phi_j: Some(5.800875978e-9),
            phi_jk: Some(2.494595791e-8),
            phi_k: Some(5.607824285999999e-6),
            h_j: Some(9.441439772e-9),
            h_jk: Some(-3.996492209e-8),
            h_kj: Some(-3.994699035e-6),
            h_k: Some(2.485561889e-5),
            h1: Some(5.450988672e-9),
            h2: Some(1.2298772109999998e-9),
            h3: Some(3.4988730580000003e-10),
            he: None,
        },
        fermi: HashMap::from([
            (4, vec![(7, 6), (8, 7), (9, 6)]),
            (6, vec![(16, 12), (16, 14), (18, 11)]),
            (7, vec![(18, 12)]),
            (9, vec![(17, 13), (18, 14)]),
            (17, vec![(18, 18), (18, 18)]),
            (11, vec![(17, 16), (18, 15)]),
            (10, vec![(17, 15)]),
            (13, vec![(17, 17), (17, 17)]),
            (5, vec![(6, 6), (7, 7), (6, 6), (7, 7), (8, 6)]),
        ]),
        coriolis: Coriol {
            data: HashMap::from([
                ((17, 16), vec![2]),
                ((18, 17), vec![1]),
                ((10, 9), vec![3]),
                ((9, 8), vec![3]),
                ((12, 9), vec![1]),
                ((15, 11), vec![1]),
                ((15, 12), vec![2]),
                ((15, 14), vec![2]),
                ((13, 12), vec![1]),
            ]),
        },
        curvils: vec![
            Bond(1, 2),
            Bond(1, 3),
            Bond(1, 4),
            Bond(2, 5),
            Bond(2, 6),
            Bond(3, 7),
            Bond(3, 8),
            Angle(1, 4, 2),
            Angle(1, 4, 3),
            Angle(2, 5, 1),
            Angle(2, 6, 1),
            Angle(3, 7, 1),
            Angle(3, 8, 1),
            Torsion(5, 2, 1, 3),
            Torsion(6, 2, 1, 3),
            Torsion(7, 3, 1, 2),
            Torsion(8, 3, 1, 2),
            Torsion(4, 1, 2, 3),
        ],
        ralpha: vec![
            1.0886447, 2.1623949, 2.1623949, 2.1575531, 2.1620003, 2.598051,
            3.3703695, 33.2014058, 66.4028116, 147.010996, 96.0414833,
            81.5794286, 48.3841523,
        ],
        requil: vec![
            1.081925,
            2.151467,
            2.151467,
            2.1448245,
            2.1581378,
            2.5798935,
            3.3612464,
            33.2301409,
            66.4602817,
            147.2135749,
            96.0320059,
            81.6500202,
            48.3712538,
        ],
    };
    check!(got, want);
}

#[test]
fn c3h3() {
    let got = Summary::new("testfiles/c3h3.out");
    let want = Summary {
        harm: vec![
            2703.543, 2654.315, 2654.289, 1840.347, 1187.899, 1187.834,
            1013.010, 967.949, 967.947, 928.691, 928.613, 907.075,
        ],
        fund: vec![
            2663.113, 2613.774, 2613.746, 1805.303, 1163.935, 1163.874,
            1001.584, 962.582, 962.578, 921.084, 921.025, 902.798,
        ],
        corr: vec![
            2663.1126, 2613.7738, 2613.7457, 1787.6737, 1163.9351, 1163.8742,
            1001.5837, 962.582, 962.5782, 921.0844, 921.0251, 902.7976,
        ],
        geom: Molecule::from_str(
            "
C   -0.5752253      0.5636900      0.0000000
C   -0.2005581     -0.7800038      0.0000000
C    0.7757834      0.2163138      0.0000000
H    1.8160258      0.5063683      0.0000000
H   -0.4694853     -1.8259092      0.0000000
H   -1.3465409      1.3195405      0.0000000
",
        )
        .unwrap(),
        irreps: vec![Ap, Ap, Ap, Ap, Ap, Ap, Ap, App, App, Ap, Ap, App],
        lxm: load_mat("testfiles/c3h3.lxm"),
        rots: vec![
            vec![29590.02824970318, 29589.9952725328, 14756.57323692454],
            vec![29570.69163616218, 29570.6586589918, 14747.24369563158],
            vec![29577.73076307602, 29576.4896222999, 14767.209873334381],
            vec![29577.763740246402, 29576.45664512952, 14733.66609520876],
            vec![29517.34956411024, 29517.316586939858, 14720.29535158196],
            vec![29638.930395452142, 29631.07283512796, 14722.711678793441],
            vec![29638.94538507504, 29631.14778324246, 14722.7026850197],
            vec![29612.365785748763, 29612.32681272922, 14743.23547046812],
            vec![29521.16592210058, 29493.67795162656, 14771.236086045321],
            vec![29521.09397191066, 29493.707930872362, 14771.236086045321],
            vec![30741.40516804882, 29641.022946808982, 18647.41466345464],
            vec![30982.64516107684, 29641.0049592615, 10828.9382820241],
            vec![29551.89764697016, 27109.8122674988, 14772.71106493868],
        ],
        rot_equil: vec![
            29643.478247040002,
            29643.478247040002,
            14821.739123520001,
        ],
        deltas: Delta {
            big_delta_j: Some(0.0335510117),
            big_delta_k: Some(0.0503219399),
            big_delta_jk: Some(-0.0209641572),
            delta_j: Some(0.0146787609),
            delta_k: Some(0.025167311),
            d_j: Some(0.0209674741),
            d_jk: Some(0.0545370683),
            d_k: Some(-0.0125957481),
            d1: Some(-0.0146787609),
            d2: Some(-0.0062917688),
            de: None,
        },
        phis: Phi {
            big_phi_j: Some(1.026257342e-7),
            big_phi_k: Some(1.0182617380000002e-6),
            big_phi_jk: Some(3.6258376850000005e-8),
            big_phi_kj: Some(-9.412244440999999e-7),
            phi_j: Some(5.099787005e-8),
            phi_jk: Some(8.379227312e-8),
            phi_k: Some(4.185430328e-7),
            h_j: Some(-4.5677976740000004e-8),
            h_jk: Some(5.855025713000001e-7),
            h_kj: Some(-5.474827617e-7),
            h_k: Some(2.235795724e-7),
            h1: Some(2.9711917340000003e-8),
            h2: Some(7.415185547e-8),
            h3: Some(2.128595271e-8),
            he: None,
        },
        fermi: HashMap::from([(
            4,
            vec![(7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)],
        )]),
        coriolis: Coriol {
            data: HashMap::from([
                ((8, 7), vec![2]),
                ((12, 11), vec![2]),
                ((6, 5), vec![3]),
                ((10, 8), vec![2]),
                ((9, 7), vec![1]),
                ((11, 9), vec![2]),
                ((12, 10), vec![2]),
                ((10, 9), vec![1]),
                ((11, 8), vec![1]),
            ]),
        },
        zpt: 8904.3886,
        // this one actually doesn't have curvils in input
        curvils: vec![],
        ralpha: vec![],
        requil: vec![],
    };
    check!(got, want);
}
